<?xml version="1.0" encoding="utf-8" ?><feed xmlns="http://www.w3.org/2005/Atom"><title>A Path Less Travelled</title><link href="http://example.com/"></link><link type="application/atom+xml" rel="self" href="http://echaozh.com/feed.xml"></link><updated>2014-03-04T17:12:12.509Z</updated><id>http://echaozh.com/feed.xml</id><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><entry><id>http://echaozh.com/posts/monad-edsl.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/monad-edsl.html"></link><title>Monads as EDSL</title><published>2014-03-05</published><updated>2014-03-05</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;DSLs are mostly standalone scripts or snippets, with a syntax different any other
general purpose languages (otherwise they&#39;re not in DSL, but just this language).
It&#39;s easy to tell what is a DSL: not C++, but can be loaded and executed by a
C++ program; and what&#39;s not: C++.&lt;/p&gt;
&lt;p&gt;However, for EDSLs, the water is not this clear. At one extreme of the spectrum,
EDSLs in Lisp is undeniably a DSL, but embedded in Lisp. On the other end, Ruby
EDSLs are just ruby code that needs more explanation to clarify its meaning, and
looks a little bit cooler than other code.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;I&#39;m gonna talk about Ruby-ish &quot;EDSL&quot;s today. To give non-Haskellers a feeling of
the language, and hopefully may bring some of them to this wonderful language.&lt;/p&gt;
&lt;p&gt;If you know Ruby, especially Ruby on Rails, you must have seen EDSLs, or just
DSLs as they&#39;re called by Rubyists. Say the query building in ActiveRecord, with
select, joins, where, group, and other keywords from SQL used in Ruby code as if
they&#39;re valid Ruby. And they are. Or a more alien looking HTML building DSL,
without dots to chain all keywords, but organized just like a HTML, or rather,
a &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; file. Like this:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/echaozh/9348484.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now, doing the same in Haskell is the most widespread way to build HTMLs.
&lt;a href=&quot;http://jaspervdj.be/blaze/&quot;&gt;Blaze HTML&lt;/a&gt;
&lt;a href=&quot;http://packdeps.haskellers.com/reverse/blaze-html&quot;&gt;has 91 reverse dependencies on hackage&lt;/a&gt;
(not counting many blog sites which are not on it), while its rivals all have
fewer than 40 (and half of Hamlet&#39;s reverse dependencies start with Yesod, half
of heist&#39;s contain snap). To quote its
&lt;a href=&quot;http://hackage.haskell.org/package/blaze-markup-0.6.0.0/docs/Text-Blaze.html&quot;&gt;reference&lt;/a&gt;:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/echaozh/9348690.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Neat, isn&#39;t it? And it&#39;s better than Ruby EDSLs, as it&#39;s simpler than the safe
ones, and safer than the clean ones. For the Ruby snippet I show you previously,
it uses &lt;code&gt;instance_eval&lt;/code&gt; to make &lt;code&gt;ul&lt;/code&gt; &amp; &lt;code&gt;li&lt;/code&gt; callable from inside the block of
code. &lt;code&gt;instance_eval&lt;/code&gt; is considered eval, well, evil, sorry about the typo. It
changes the context of the executing block (and then you&#39;re afraid, Ruby users?
JavaScript will scare you to death by letting you guess what &lt;code&gt;this&lt;/code&gt; is inside a
function call), whatever it means. For cleaner versions, like in the
&lt;code&gt;FormHelper&lt;/code&gt; from RoR, a &lt;code&gt;f.&lt;/code&gt; prefixes every EDSL verb, and making it less
cryptic, and more Ruby like.&lt;/p&gt;
&lt;p&gt;The Haskell version is possible thanks to something called
&quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Monad_(functional_programming&quot;&gt;Monads&lt;/a&gt;)&quot;. And
thanks to Haskell&#39;s
&lt;a href=&quot;http://www.haskell.org/haskellwiki/Monad#Special_notation&quot;&gt;do notation&lt;/a&gt; to
avoid strange arrow like symbols (&lt;code&gt;&gt;&gt;=&lt;/code&gt;). Reading the latter link, you can find
out how Haskellers think of monads: as a &lt;em&gt;composable&lt;/em&gt; computation descriptions.
Well, I always find this line vague, so let&#39;s just say it&#39;s an evaluation
context, like the &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;self&lt;/code&gt; in various mainstream languages, in a very
stretched sense. Say in the example below:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/echaozh/9349531.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can save it in &lt;code&gt;stack.hs&lt;/code&gt;, and run it with &lt;code&gt;runghc stack.hs&lt;/code&gt;. It prints
&lt;code&gt;[2,1]&lt;/code&gt;, as you have seen, with 1, 2, and 3 pushed one after another, and the
last number popped. The &lt;code&gt;testStack&lt;/code&gt; has a type of &lt;code&gt;Stack Int ()&lt;/code&gt;, which is its
return type, making it a constant with no arguments. Wait, it&#39;s a constant? but
it&#39;s all actions inside, ow can it be a constant? Say I am writing in Ruby or
C++, can I have a constant with 3 push statements and 1 pop? I can&#39;t even have
a variable with such a value, which is not even a value. &lt;code&gt;testStack&lt;/code&gt; doesn&#39;t
make a stack and return it, as you can see from the code, it returns a string
saying it&#39;s not a stack builder!&lt;/p&gt;
&lt;p&gt;Well, keep reading the HaskellWiki, you will find:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of monad is thus separation of composition timeline from the
composed computation&#39;s execution timeline, as well as the ability of
computation to implicitly carry extra data, as pertaining to the computation
itself, in addition to its one (hence the name) output, that it will produce
when run (or queried, or called upon).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In mortal language, it basically means 2 things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;calling &lt;code&gt;testStack&lt;/code&gt; doesn&#39;t run it immediately. Given a stack, it can manipulate it and return a human readable explanation, but it doesn&#39;t produce a stack by itself. It&#39;s like a &lt;a href=&quot;http://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;promise (as in concurrent programming)&lt;/a&gt; of stack operations, but pending and not resolved;&lt;/li&gt;
&lt;li&gt;when you actually goes on to resolve the pending promise, with a real stack, by calling &lt;code&gt;execState&lt;/code&gt;, the operations will happen, and the string will be returned. And the stack magically makes its appearance in the &lt;code&gt;Stack&lt;/code&gt; monad to &lt;code&gt;testStack&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, if you look at &lt;code&gt;State&lt;/code&gt;&#39;s definition, it&#39;s
&lt;code&gt;newtype State s a = {runState :: s -&gt; (a, s)}&lt;/code&gt;, meaning it&#39;s a &quot;structure&quot;
with 1 field called &lt;code&gt;runState&lt;/code&gt;, which is a function type, taking a &lt;code&gt;s&lt;/code&gt; (or
&lt;code&gt;[Int]&lt;/code&gt; in our example), and returns &lt;code&gt;(a, s)&lt;/code&gt;, which is a tuple
(&lt;code&gt;(String, [Int])&lt;/code&gt; in &lt;code&gt;testStack&lt;/code&gt;&#39;s case). This function is the &quot;computation
description&quot; mentioned in HaskellWiki: &lt;code&gt;push&lt;/code&gt; pushes something to the stack,
and &lt;code&gt;pop&lt;/code&gt; pops something out. The structure is thus a Monad.&lt;/p&gt;
&lt;p&gt;Though the stack operations are simplistic, they look like Ruby EDSLs, or even
better. Unlike Ruby, the EDSL can be easily extended, even in other modules, or
even other projects. You don&#39;t need to inject or monkey patch anything, you just
define a function returning a &lt;code&gt;Stack&lt;/code&gt; monad. Actually, the &lt;code&gt;testStack&lt;/code&gt; function,
despite its name and the useless deed it does, is a valid verb for stack
operation. You can define &lt;code&gt;pushTwice&lt;/code&gt; or &lt;code&gt;popTillEmpty&lt;/code&gt; or various other
interesting operations.&lt;/p&gt;
&lt;p&gt;For serious, useful and understandable monad starters, you can take a look at
&lt;a href=&quot;http://legacy.cs.uu.nl/daan/parsec.html&quot;&gt;parsec&lt;/a&gt;. &lt;code&gt;Maybe&lt;/code&gt; is a monad with no
EDSL like verbs, but very useful. You can consider it as a safe nullable pointer,
which will never throw a &lt;code&gt;NullPointerException&lt;/code&gt; in your face. &lt;code&gt;Either&lt;/code&gt; is also
interesting, as it makes skipping computation on exception possible without
&lt;code&gt;goto&lt;/code&gt; or stack unwinding. Lists (&lt;code&gt;[]&lt;/code&gt;) are monads as well, and
&lt;a href=&quot;http://learnyouahaskell.com/a-fistful-of-monads&quot;&gt;list comprehension is just a syntax sugar for monadic operations&lt;/a&gt;.
The day I first ran into this pearl was made awesome by it.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/haskell-my-destination.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/haskell-my-destination.html"></link><title>Haskell My Destination</title><published>2014-03-04</published><updated>2014-03-04</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;Sadly, people around me, even programmers, don&#39;t read much science fiction, so in
case you don&#39;t recognize, the title is an allusion to Alfred Bester&#39;s book (find
it out and read it!).&lt;/p&gt;
&lt;p&gt;Well, I come to realize that Haskell may be my last language. Well, I&#39;d like to
learn Clojure when I&#39;m free and play with it, but I will always come back to
write things in Haskell if possible. I&#39;ve had such realizations before. Over
time, Smalltalk, Ruby, Common Lisp, have all been my last language for some time,
but Haskell is going to stick, I think.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;You may have noticed that I prefer simple languages. Not easy ones, mind you,
because Common Lisp, and especially Haskell, are both beyond easy, which
contributes to the fact that they&#39;re rarely used these days. However, they&#39;re
all simple, and powerful, like a bomb of antimatter, with a small core in the
middle, but can produce so much.&lt;/p&gt;
&lt;p&gt;In Smalltalk and Ruby, everything is an object. In Common Lisp, everything is a
list. In Haskell, everything is a function. Even a variable is a function with
no argument. You know, since a function with no argument always does the same
thing, they&#39;d better be called constants rather than variables. Even better,
all functions, except the constants, are not only functions, but also unary
functions. That is, they take only 1 argument, and return something. Then how do
Haskellers add 1 to 2? you would ask. Well, (+) is an unary function too! It
takes 1 and returns... (1+)! It&#39;s another function! and you can apply it to 2,
giving 3.&lt;/p&gt;
&lt;p&gt;Simple as that. Sure, there must be something else. You have types, but they
seldom play a significant role in the program logic (not saying that they will
be out of your way when you&#39;re trying to implement that logic), as they change
even less. And there&#39;re kinds and even sorts (what a marvelous language English
is! I can&#39;t to see how these concepts get translated into Chinese). I don&#39;t think
present day mainstream languages go this far to strain the natural language, and
there is a reason people stay away from Haskell &amp; other functional languages: to
stay (mostly) sane.&lt;/p&gt;
&lt;p&gt;I have stayed away from kinds, let alone sorts, this far, and this fact is
bothering me even if learning these things may make me crazy. Not being able to
use or understand Boost MPL has not bothered me at all. That&#39;s not for common
people. Even masters don&#39;t often use them. I don&#39;t remember hearing MPL mentioned
anywhere other than inside the Boost libraries. (Sure, I have not seen a lot of
C++ libraries either. Who knows, other than monolithic, everything included
frameworks like Qt, Gtk, etc, there&#39;re few C++ libraries to talk about in the
first place. People tend to write libs in C rather than C++, and then write a
C++ wrapper, which is not very C++-ish.) But in Haskell, everybody seems to know
everything about everything. What is endomorphism? Hom sets? Profunctors?
(Disclaimer: I don&#39;t know what they mean.) Really? And you have to write papers
with math formulas all over the place to show people how to do something in
Haskell? Have you ever read &quot;Howto&quot;s in, say Python? or Ruby? or even C++ or
Lisp? To show mortal people how to do something, you show them the code, and
explain the logic, and the tricks. To show Haskellers, you show them math,
strange symbols and formulas above and under long lines. As if it were easily
understandable for us sipping our coffee after a long hour of breathless typing.
Sure, I know I&#39;m talking like showing code to us is easier for us, but it&#39;s not.
You have to think really hard to make types fit together, before you even get to
the meaning.&lt;/p&gt;
&lt;p&gt;But damn I&#39;m attracted. Like a moth attracted to fire, I cannot help but want to
write in Haskell. To challenge it and see how far I can get before burning
myself. I don&#39;t hope to get to know everything, no, I don&#39;t even want to learn
much math (category theory, eh? The Chinese translation always eludes me when I
want to talk about it.) I don&#39;t want to be a scientist. I just want to be a
pragmatic engineer, taming some part of the dragon&#39;s power, and ride it to the
stars.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/functional_cpp.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/functional_cpp.html"></link><title>Programming in C++ in a More Functional Way</title><published>2013-12-29</published><updated>2013-12-29</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;Recently I&#39;m playing with &lt;a href=&quot;https://github.com/Neverlord/libcppa&quot;&gt;libcppa&lt;/a&gt;, by
implementing the &lt;a href=&quot;https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf&quot;&gt;Raft consensus protocol&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I am writing tests, I become more and more certain that classes is not the
right pieces to make up a program. A class, or its encapsulation by using private
members and methods can make some tests hard or impossible. If you lift the
members to public, then the class is not necessary any more.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;Raft is a consensus protocol, meaning it can make different nodes across the
network to agree with things. Any participant has to be in 1 of 3 modes: the
follower, the candidate, and the leader. Only the leader answers to requests
from clients. All the others are followers, and they only observe and acknowledge
to logs from the leader generated after accepting write requests. They don&#39;t talk
to the clients, not even read requests. Which means, there is no way to tell if
the internal states of the follower is correct, as there is no such interface.&lt;/p&gt;
&lt;p&gt;To test the follower behavior, I either have to peek at its state after each
transaction, or execute another transaction to see if the second one works and
guess that the state must be correct. Well, why bother, so I take the first
approach. But how can I access the state if it&#39;s a private member of the
&lt;code&gt;raft&lt;/code&gt; class? Then there&#39;s another choice to make:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;make the test suite a friend of the class;&lt;/li&gt;
&lt;li&gt;make the state field public, or make a public accessor;&lt;/li&gt;
&lt;li&gt;make the state field public when it&#39;s testing;&lt;/li&gt;
&lt;li&gt;forget it, don&#39;t define a &lt;code&gt;raft&lt;/code&gt; class in the first place.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, since I am writing this post, I definately took the last option.
Friends are uglym and I don&#39;t like tests forcing things into the tested code.
Also, having different code for tests and production immmediately sounds like a
terrible idea, as the production code is actually not tested. Though, wrong
accessibility of fields should be catchable by the compiler, so it&#39;s not such a
huge problem by itself, but it still smells. Making a public accessor is a bad
idea as nothing besides the tests will require it. Making the state field public
directly breaks encapsulation, and renders the class wrapper unnecessary.&lt;/p&gt;
&lt;p&gt;When we have closures, why do we need classes any more? C doesn&#39;t have classes,
but it&#39;s still possible to achieve polymorphism in C, via function pointers. And
closures are the upgraded version of function pointers, with states to get rid of
the horrible &lt;code&gt;void* arg&lt;/code&gt; every time we define a callback.&lt;/p&gt;
&lt;p&gt;I&#39;ve read somewhere another day, that Haskell, with closures, doens&#39;t need
classes in the OO sense. The argument is that, (in principle, as I cannot find
the link now), classes is basically a way to bind states to functions; since
closure is another way to do it, and more reflexible, there is no need to define
a class every time we need a small difference in behavior. We can just define a
lambda function, capture whatever state it needs, and pass it on. It cannot be
more insightful. Think of the anonymous classes in Java. And think of factory
methods. Class names are rarely used, only to instantiate. Later when being used,
the exact class names don&#39;t appear in user code, or polymophism doesn&#39;t work.&lt;/p&gt;
&lt;p&gt;As the 3 modes transit to each other within the state machine, the implementation
of each mode should actually be private. To make them testable, I broke the
&lt;code&gt;raft&lt;/code&gt; class into 3, 1 for each mode. Also, they&#39;re not classes. They are
each a function returning the behavior for the libcppa actors.&lt;/p&gt;
&lt;p&gt;Breaking down the class actually helps make the code more mock-testable. If I
went with the class, or classes, much of the infrastructure would definately go
into the class/classes. Like log reading/writing, or random timeout generation.
When testing, to have to read/write logs from/to the disk is too inconvenient,
even if you don&#39;t have to initialize the log files beforehand, and remove them
afterwards. It should be made &lt;code&gt;virtual&lt;/code&gt; to be overridden in the derived mock
class. However, it&#39;s more propable that I will go with the real log processing
implementation and test them together. However, the fact that log processing
itself should have its own test set. Indirect tests may not give the most
thourough coverage. Also, it&#39;s highly impossible I would make random timeout
generation &lt;code&gt;virtual&lt;/code&gt;, but being able to change the timeout distribution is
still useful, say to test conflict cases when multiple candidates share similar
election deadlines.&lt;/p&gt;
&lt;p&gt;Closures instead of classes make switching strategies/policies easier. With a
&lt;code&gt;candidate&lt;/code&gt; class, if I want to &lt;code&gt;become&lt;/code&gt; it when the &lt;code&gt;follower&lt;/code&gt; times
out, the &lt;code&gt;follower&lt;/code&gt; behavior must templated to be able to instantiate
different &lt;code&gt;candidate&lt;/code&gt; classes on demand. With closures, the template is
not necessary, and code can be put in source files instead of headers. (Though
it actually is templated now, not for modes, but for mocking log entries.)
Closures also make it possible to write table driven factory methods. You cannot
put classes as values into a map, but you can do it to closures.&lt;/p&gt;
&lt;p&gt;In C++ 11, free functions &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; are added to make ranged
for possible for all iterable things. Not all of them have corresponding methods
in their interface, and can be modified to have them. And overloaded operators
are sometimes outside the type. Free functions can extend types and closures make
them more powerful. I think it&#39;s time to define more functions and fewer classes.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/teasers-and-tags.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/teasers-and-tags.html"></link><title>Adding Teasers and Tags for Posts with Harp</title><published>2013-10-10</published><updated>2013-10-10</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;Starting a blog using &lt;a href=&quot;http://harpjs.com&quot;&gt;Harp&lt;/a&gt; is
&lt;a href=&quot;http://harpjs.com/docs/quick-start&quot;&gt;very easy&lt;/a&gt;. Here&#39;s how to add teasers to the
front page, and how to make tag pages.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;Adding Teasers&lt;/h3&gt;
&lt;p&gt;Let&#39;s add support for WordPress style teasers: teaser and the rest of the content
separated by a &lt;code&gt;&lt;!-- more --&gt;&lt;/code&gt; comment.&lt;/p&gt;
&lt;p&gt;Well, first you add the comment to your posts, like this:&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/echaozh/6916985.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;noscript&gt;
  &lt;a href=&quot;https://gist.github.com/echaozh/6916985#file-post-example&quot;
     target=&quot;_blank&quot;&gt;
    Open the Gist
  &lt;/a&gt;
&lt;/noscript&gt;

&lt;p&gt;Then, in &lt;code&gt;index.jade&lt;/code&gt;, you can render the post and strip away the comment and
everything after it. Then you got your teaser. This is possible because partials
in the Harp flavored &lt;a href=&quot;jade-lang.com&quot;&gt;Jade&lt;/a&gt; is implemented by passing in a
&lt;code&gt;partial()&lt;/code&gt; function which is callable by JavaScript code in the Jade template!
Calling &lt;code&gt;partial(postFilePath)&lt;/code&gt; actually returns the rendered post as a
JavaScript string. Then it&#39;s easy to call &lt;code&gt;String.prototype.replace()&lt;/code&gt; to strip
away everything you don&#39;t need.&lt;/p&gt;
&lt;p&gt;The JavaScript code is really simple (assuming you put your posts under
public/posts):&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/echaozh/6917018.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;noscript&gt;
  &lt;a href=&quot;https://gist.github.com/echaozh/6917018#file-teaser-extraction-js&quot;
     target=&quot;_blank&quot;&gt;
    Open the Gist
  &lt;/a&gt;
&lt;/noscript&gt;

&lt;p&gt;Prefix each line with &lt;code&gt;-&lt;/code&gt; to make it unbuffered code in Jade.&lt;/p&gt;
&lt;p&gt;The teaser will look like this:&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/echaozh/6917031.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;noscript&gt;
  &lt;a href=&quot;https://gist.github.com/echaozh/6917031#file-teaser-html&quot;
     target=&quot;_blank&quot;&gt;
    Open the Gist
  &lt;/a&gt;
&lt;/noscript&gt;

&lt;p&gt;Put it in the front page.&lt;/p&gt;
&lt;h3&gt;Making Tag Pages&lt;/h3&gt;
&lt;p&gt;Or, more precisely, making a tag page to dynamically list posts for different
tags. Harp, AFAIK, doesn&#39;t allow you to create pages without a template. And it&#39;s
for developing WebApps. So the solution is obvious: you need client side
JavaScript to make it possible (unless you create a page template for each tag
by hand).&lt;/p&gt;
&lt;p&gt;My solution is to populate the tag page with all tags, and hide those tags you
don&#39;t want. The wanted tag name is passed in via the hash part in the URL.&lt;/p&gt;
&lt;p&gt;Tags, as I mentioned in the &lt;a href=&quot;/posts/to-harp.html&quot;&gt;Migrated Blog to Harp&lt;/a&gt; post,
should be specified in the &lt;code&gt;_data.json&lt;/code&gt; file. Extracting tags from the file is
really straightforward.&lt;/p&gt;
&lt;p&gt;Source of my tag template:&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/echaozh/6917115.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;noscript&gt;
  &lt;a href=&quot;https://gist.github.com/echaozh/6917115#file-tag-page-jade&quot;
     target=&quot;_blank&quot;&gt;
    Open the Gist
  &lt;/a&gt;
&lt;/noscript&gt;

&lt;h3&gt;Jade Snippet to Find Page Data&lt;/h3&gt;
&lt;p&gt;Harp only sends in a &lt;code&gt;current&lt;/code&gt; object with path info of the template. To find
data registered for the specific template, use the JavaScript snippet below (and
don&#39;t forget to prefix the lines):&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/echaozh/6917128.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;noscript&gt;
  &lt;a href=&quot;https://gist.github.com/echaozh/6917128#file-page-data-js&quot;
     target=&quot;_blank&quot;&gt;
    Open the Gist
  &lt;/a&gt;
&lt;/noscript&gt;

&lt;p&gt;I put it in &lt;code&gt;_page.jade&lt;/code&gt; and include it in almost every Jade template.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/to-harp.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/to-harp.html"></link><title>Migrated Blog to Harp</title><published>2013-10-08</published><updated>2013-10-08</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;I have migrated my blog to &lt;a href=&quot;http://harpjs.com&quot;&gt;Harp&lt;/a&gt;! Now I&#39;ve waved goodbye to
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;http://jaspervdj.be/blaze/&quot;&gt;Blaze HTML&lt;/a&gt;,
and am using &lt;a href=&quot;http://jade-lang.com&quot;&gt;Jade&lt;/a&gt; instead. I am pretty happy with the
migration.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;Though I am not using Harp as a server, I&#39;m happy with its compilation process.
With native Jade support, I can finally get rid of my Makefiles! Jade also
supports embedded JavaScript logic, so tag pages can be generated directly in the
Jade template, rather than in a Jekyll plugin, which is definately more
convenient in my eyes.&lt;/p&gt;
&lt;p&gt;Also, the meta data is put in a separate &lt;code&gt;_data.json&lt;/code&gt; file
in each directory, rather than scattering in each page. This is arguably better
than in-page meta data, as it allows easy tag extraction. And it makes each page
clean, as the meta data is not always syntactically correct, which sometimes
makes me, a purist, itch somewhere unscratchable. And it eases meta data
processing logic in the static site generator. Though, sometimes it is more
annoying to open up another file to write meta data to, and you tend to forget.&lt;/p&gt;
&lt;p&gt;On the whole, I am pretty happy with the transition. Oh, I had to patch the
Terraform library depended by Harp to make nested layout templates possible. I
will send the patch upstream some time later. Can&#39;t believe they left such useful
functionality out.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/luapp.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/luapp.html"></link><title>LuaPP, a Wrapper for Lua in C++</title><published>2013-10-07</published><updated>2013-10-07</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/echaozh/luapp&quot;&gt;LuaPP&lt;/a&gt; is a library I wrote to ease the embedding of Lua scripts into C++ applications. It&#39;s more C++-ish, and much easier to use.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;The library makes Lua tables, functions, and other primitive types directly accessible from the C++ code. Instead of manipulating the stack, you can directly get and set values to a global variable, or access fields of a table, or invoke a function as if it was native. You can pass in arguments of the std::string type, and it will be converted. You can even pass in Lua tables as arguments. Variadic arguments are used in the function interface to make invocations look and feel more native.&lt;/p&gt;
&lt;p&gt;When you embed Lua into your application, you normally want to load external Lua scripts, execute them, and interact with them (say invoke functions defined in the scripts). LuaPP helps you interact with the scripts easily.&lt;/p&gt;
&lt;p&gt;I wrote another library &lt;em&gt;taveren&lt;/em&gt; using LuaPP to embed Lua scripts into strings. It makes expansions in string literals like in Bash or Ruby possible.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/python-dbtxn.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/python-dbtxn.html"></link><title>Introducing Python dbtxn Library</title><published>2013-10-06</published><updated>2013-10-06</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/echaozh/python-dbtxn&quot;&gt;python-dbtxn&lt;/a&gt; is a library I wrote to ease db accessing from Python programs. Directly calling Python DBI leaves a lot of boilerplate code all over the place, and boilerplate code is bad. I googled, and there are no dbtxn like libraries, so I wrote my own.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;There are 2 sources of boilerplate code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cursor.execute() and cursor.fetchall()/cursor.rowcount/cursor.lastrowid have to be separately called to execute a SQL and then acquire the results/information of the execution;&lt;/li&gt;
&lt;li&gt;connection/cursor objects have to be acquired first, and then closed. The transaction has to be committed or aborted each time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first problem can be easily fixed by wrapping your own function around the execute() and fetchall() calls. At the lowest level, the DBI doesn&#39;t want to incur the cost of info fetching on those callers who don&#39;t care about the info. This is easily understandable by one from the C++ background (ie, me). However, it&#39;s unwieldy, and at a higher level, I can make my own decision to pay the price each time I execute a SQL statement.&lt;/p&gt;
&lt;p&gt;The second source of boilerplate code comes from the execution model of the Python DBI. The DBI is an API to be called, rather than a framework to make the calls. When there is no transaction to commit, the passive API/library model works fine and unobtrusive. However, so long as transactions are involved, boilerplate code emerges as all transactions are alike. The dbtxn library manages the transaction, setting up the necessary exception-safe resource releasing mechanism.&lt;/p&gt;
&lt;p&gt;The dbtxn library does more than simply managing transactions. Actually, it separates the business logic which doesn&#39;t care about the underlying database from the callers who know and play with the dirty details. The business logic only needs to know about the SQLs and the processing of the result set, but not the connection, cursor or transaction involved. And business logic should be composable into bigger transactions, without having to pass cursors around. This is all possible with dbtxn.&lt;/p&gt;
&lt;p&gt;Generators instead of plain functions are chosen as the interface of the library. This is straightforward, as the callee of the dbtxn() function &lt;em&gt;generates&lt;/em&gt; SQLs to be executed by dbtxn(), which forms an obvious producer/consumer relationship. You can yield multiple SQLs from the same generator without returning to dbtxn(), and without dbtxn() passing in anything when calling the logic, polluting its interface. dbtxn() also handles nested generators, making the SQL generators composable. SQLs in the same transaction can be grouped into multiple generators, making the code more maintainable.&lt;/p&gt;
&lt;p&gt;Using generators makes mocking the database for the business logic a breeze. You don&#39;t need a database or mocking the DBI. You don&#39;t even need the dbtxn library. To test the logic, you just need to call it and send() in data as the result set. Also, the send() calls and the _yield_s can be easily paired, without any bookkeeping.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;@in_txn&lt;/code&gt; decorator is provided to remove the cluttering calls of dbtxn(). Decorated by it, the generators can be called as if they&#39;re ordinary functions. &lt;code&gt;@for_recurse&lt;/code&gt; is provided to make nested generator look like ordinary functions.&lt;/p&gt;
&lt;p&gt;In retrospect, dbtxn() looks a lot like a monad, namely, the STM monad. The goal to encapsulate computation is close, but the implementation is not. I will work to make it more monadic.&lt;/p&gt;
</content></entry><entry><id>http://echaozh.com/posts/first-post.html</id><link type="text/html" rel="alternate" href="http://echaozh.com/posts/first-post.html"></link><title>My First Blog Post Here</title><published>2013-09-28</published><updated>2013-09-28</updated><author><name>Zhang Yichao</name><email>echaozh#gmail.com</email></author><content type="html">&lt;p&gt;This is my very first blog post on this &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; powered
static blog site.&lt;/p&gt;
&lt;p&gt;Posts are generated from Markdown drafts. Layouts and other HTML files are
generated using &lt;a href=&quot;http://jaspervdj.be/blaze/&quot;&gt;Blaze HTML&lt;/a&gt;. Raw HTML feels ugly,
especially with unbreakable long strings as attribute values. Generating HTMLs
with DSLs solves this problem effectively. I am considering switching to
some Ruby DSL later.&lt;/p&gt;
</content></entry></feed>